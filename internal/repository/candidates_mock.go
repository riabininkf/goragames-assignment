// Code generated by mockery v2.42.3. DO NOT EDIT.

package repository

import (
	context "context"

	entity "github.com/riabininkf/goragames-assignment/internal/repository/entity"
	mock "github.com/stretchr/testify/mock"
)

// CandidatesMock is an autogenerated mock type for the Candidates type
type CandidatesMock struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, candidate
func (_m *CandidatesMock) Add(ctx context.Context, candidate *entity.Candidate) error {
	ret := _m.Called(ctx, candidate)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Candidate) error); ok {
		r0 = rf(ctx, candidate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByEmailAndCode provides a mock function with given fields: ctx, email, code
func (_m *CandidatesMock) GetByEmailAndCode(ctx context.Context, email string, code string) (*entity.Candidate, error) {
	ret := _m.Called(ctx, email, code)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmailAndCode")
	}

	var r0 *entity.Candidate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*entity.Candidate, error)); ok {
		return rf(ctx, email, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.Candidate); ok {
		r0 = rf(ctx, email, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Candidate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCandidatesMock creates a new instance of CandidatesMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCandidatesMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CandidatesMock {
	mock := &CandidatesMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
